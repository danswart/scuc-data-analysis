---
title: "Plotting Data From TEA Reports"
author: "Dan Swart"
format: html
---

New code chunk shortcut =   Option + Cmd + I

Expand cursor = Cntrl + Option + DownArrow 

The Grammar of Animation

    Transitions
    Views
    Shadows
    Easing
    Enter and Exit


```{r}
# Load libraries

library(tidyverse)
library(qicharts2)
library(haven)
library(readxl)
library(skimr)
library(visdat)
library(gghighlight)
library(dplyr)
library(stringr)
library(ggtext)
library(gganimate)
library(ggplot2)
library(purrr)
library(scales)
library(ggrepel)
library(plotly)

```

Load data sets

```{r}

### load scuc data files

df1 <- read_csv(file = here::here("data","TEST SCUC 2004 TEA TAKS Data Grades 3-11.csv"))

df2 <- read_csv(file = here::here("data","SCUC Snapshots 1995 to 2022-LONG.csv"))

```

 ## Start Exploring
 

```{r}

glimpse(df1)

glimpse(df2)

```


# Summarize df1 data.  

## NOTE:  There is only one year in df1, so must limit to comparison plots - NO TIME SERIES PLOTS

# Prepare the df1 data set for plotting

```{r}

df1 <- read_csv(file = here::here("data","TEST SCUC 2004 TEA TAKS Data Grades 3-11.csv"))

avgbycategory <- df1 %>%
  filter(category != "All") %>%
  mutate(grade_factor = as.factor(grade)) %>% 
  select(
    category, 
    grade_factor, 
    subject, 
    value) %>%
  group_by(
    category, 
    grade_factor,
    subject) %>% 
  summarise(
    mean_value = mean(
      value, 
      na.rm = TRUE)
  )

```


# Create a plot to compare "Male" and "Female" standardized scores for all subjects for each grade 3-11 

## REMEMBER:  THERE IS ONLY ONE YEAR IN THIS DATA FRAME SO FAR AS OF 2024-05-18

Use animation to present each grade on the x axis

A bar chart

```{r fig.width = 2000, fig.height = 1000, echo=FALSE, warning=FALSE, message=FALSE}

df1 <- read_csv(file = here::here("data","TEST SCUC 2004 TEA TAKS Data Grades 3-11.csv"))


avgbycategory <- df1 %>%
  filter(category != "All") %>%
  mutate(grade_factor = as.factor(grade)) %>% 
  select(
    category, 
    grade_factor, 
    subject, 
    value) %>%
  group_by(
    category, 
    grade_factor,
    subject) %>% 
  summarise(
    mean_value = mean(
      value, 
      na.rm = TRUE)
  )


# Specify desired categories from df1
desired_categories <- c("Male", "Female")

# Specify desired metric
desired_metric <- c("mean_value")

# Specify desired subjects
desired_subjects <- c("All")

# Specify desired years 
# desired_years <- 1995:2022  # range of years

# Specify desired level of achievement
# desired_level <- c("approaches_above")

# Specify desired grade_factor level
desired_grades <- c("3", "4", "5", "6", "7", "8", "9", "10", "11")

# Filter rows in the modified df1 data frame

dfplot <- avgbycategory %>%
  filter((category %in% desired_categories) &
         (subject %in% desired_subjects) &
         (grade_factor %in% desired_grades)
         )

malefemale <- ggplot(dfplot,
                     aes(
                       x = grade_factor, 
                       y = mean_value, 
                       fill = category,
                       )
                     ) +
  geom_col(position = "dodge") +
  transition_states(grade_factor, transition_length = 5, state_length = 5, wrap = FALSE) +
  shadow_mark() +
  labs(x = "Grade", y = "Mean Value", fill = "Category")

animate(malefemale,
        nframes = 300, 
        fps = 30, 
        duration = 28, 
        end_pause = 100, 
        rewind = FALSE)

```



Now plot avg score by grade level, by ethnicity...

Animation hurts the presentation in this plot so omit it.


```{r}

# Specify desired categories in df1
desired_categories <- as.character(avgbycategory$category[avgbycategory$category %in% c("African American", "All", "Asian/Pacific Islander", "Hispanic", "Native American", "White")])


# Specify desired metric
desired_metric <- c("mean_value")

# Specify desired subjects
desired_subjects <- c("All")

# Specify desired years 
# desired_years <- 1995:2022  # range of years

# Specify desired level of achievement
# desired_level <- c("approaches_above")

# Specify desired grade_factor level
desired_grades <- c("3", "4", "5", "6", "7", "8", "9", "10", "11")

# Filter rows in the modified df1 data frame

dfplot <- avgbycategory %>%
  filter((category %in% desired_categories) &
         (subject %in% desired_subjects) &
         (grade_factor %in% desired_grades)
         )


dfplot <- dfplot %>% 
  filter(!is.na(mean_value) & !is.nan(mean_value))

ggplot(dfplot,
       aes(
         x = grade_factor, 
         y = mean_value, 
         fill = category) 
       ) +
  geom_col(position = "dodge")
  


```



Let's look now at the Average Teacher Turnover Rate over the years

## NOTE:  df1 has all possible values for grade level     #####
## NOTE:  df2 has only one value for grade level = "all"  #####

Prepare the data frame named df2plot...

```{r}

# Load libraries

library(tidyverse)
library(qicharts2)
library(haven)
library(readxl)
library(skimr)
library(visdat)
library(gghighlight)
library(dplyr)
library(stringr)
library(ggtext)
library(gganimate)
library(ggplot2)
library(purrr)
library(scales)
library(ggrepel)
library(plotly)

### load scuc data files

df2 <- read_csv(file = here::here("data","SCUC Snapshots 1995 to 2022-LONG.csv"))



# Specify desired filters for df2

# c("All Subjects", "White", "African American", "Hispanic", "Asian", "American Indian", "Pacific Islander", "Economically Disadvantaged", "2 or More Races")

desired_groupings <- c("Teacher Turnover Rate")

# Specify desired metric
desired_sections <- c("teachers")

# Specify desired units
desired_units <- c("rate")

# Sprcify desired years 
desired_years <- 1995:2022  # range of years

# Specify desired level of achievement
# desired_level <- c("approaches_above")

# Specify desired grade level
# c("all", "3", "4", "5", "6", "7", "8", "9", "10", "11")
##### NOTE:  df1 has all possible values for grade level     #####
##### NOTE:  df2 has only one value for grade level = "all"  #####

# desired_grades <- c("all")

# Filter the data frame

df2plot <- df2 %>%
  filter((grouping %in% desired_groupings) &
         (section %in% desired_sections) &
         (units %in% desired_units) &
         (year %in% desired_years)) 
         # (grade %in% desired_grades) &
         # (level_achieved %in% desired_level))

# Create dynamic title and subtitle
title <- paste0("Run Chart of ", paste(desired_groupings))
subtitle <- paste0("for the years ", 
                    min(desired_years),
                    " - ",
                    max(desired_years))


```


# Create the chart with qicharts2

```{r}

p <- qic(x = df2plot$year,
    y = df2plot$value,
    # n	= Vector of subgroup sizes (denominator).
    # data  = Data frame containing variables used in the plot,
    # facets = One or two sided formula with factors used for facetting plots,
    # notes = Character vector of notes to be added to individual data points.
    chart = "run",
    # chart = c("run", "i", "mr", "xbar", "s", "t", "p", "pp", "c", "u", "up", "g"),
    # agg.fun = c("mean", "median", "sum", "sd"),
    # method = c("anhoej (default)", "bestbox", "cutbox"),
    #  multiply = 10,  # Number indicating a number to multiply y axis by, e.g. 100 for percents rather than proportions. See also y.percent argument.
    # method = c("anhoej", "bestbox", "cutbox"),
    # multiply = 1, #Number indicating a number to multiply y axis by, e.g. 100 for percents rather than proportions. See also y.percent argument
    # freeze = NULL, # Integer indicating the last data point to include in calculation of baseline parameters for centre and control lines. Ignored if part argument is given.
    # part = NULL,  # Either integer vector indicating data points before recalculation of centre and control lines or character vector indicating chart parts.
    # exclude = NULL,  # Integer vector indicating data points to exclude from calculations of centre and control lines.
    # target = NA * 1,  # Numeric, either a single value indicating a target value to be plotted as a horizontal line or a vector for variable target line.
    # cl = NA * 1,  # Numeric, either a single value indicating the centre line if known in advance or a vector for variable centre line.
    # nrow = NULL,  # Number indicating the preferred number of rows in facets.
    # ncol = NULL,  # Number indicating the preferred number of columns in facets.
    # scales = "fixed",  # Character string, one of 'fixed' (default), 'free_y', 'free_x', or 'free' indicating whether y and x axis scales should be the same for all panels or free.
    # part.labels = NULL,  # Character vector specifying labels for chart parts created with the freeze or part argument.
    # show.labels = is.null(facets),  # Logical indicating whether to show labels for centre and control lines on chart. Defaults to TRUE when facets argument is NULL.
    # show.95 = FALSE,  # Logical indicating whether to show 95 control limits on chart. Defaults to FALSE.
    # decimals = 1,  # Integer indicating the preferred number of decimals in centre and control line labels.
   point.size = 2.0,  # Number specifying the size of data points (default = 1.5).
    # x.period = NULL,  # Character string specifying the interval cut points of datetime x values used for aggregating y values by week, month, etc. See the breaks argument of ?cut.POSIXt() for possible values.
    # x.format = NULL,  # Date format of x axis labels. See ?strftime() for possible date formats.
    # x.angle = 90,  # Number indicating the angle of x axis labels.
    # x.pad = 35,  # Number indicating expansion of x axis to make room for axis labels.
    y.expand = 25,  # Numeric value to include in y axis. Useful e.g. for starting the y axis at zero.
    # y.neg = TRUE,  # If TRUE (default), the y axis is allowed to be negative (only relevant for I and Xbar charts).
  # y.percent = TRUE,  # If TRUE, formats y axis labels as percentages.
  # y.percent.accuracy = 1,  # A number to round percentage labels on y axis. Use 1 to show no decimals, 0.1 to show 1 decimal etc.
    show.grid = TRUE,  # If TRUE, shows grid.
    # flip = FALSE,  # If TRUE, rotates the plot 90 degrees.
    # strip.horizontal = FALSE,  # If TRUE, makes y strip horizontal.
    # print.summary = TRUE,  # If TRUE, prints summary INSTEAD OF PLOT
    # return.data = TRUE,  # If TRUE, returns underlying data frame INSTEAD OF PLOT.
    title  = title,
    subtitle = subtitle,
    caption = "In this Plot, the Center Line is the Median",
    ylab = 'Teacher Turnover Rates (in percent)',
    xlab = 'Academic Year-End')
 

p

p2 <- ggplotly(p)

p2

```



```{r}


# Demo data
df2 <- Orange

head(df2)

# Filter the last values
data_ends <- df2 %>% 
  group_by(Tree) %>% 
  top_n(1, age) 

data_ends

# Create plot
p5 <- ggplot(df2, aes(age, circumference)) +
  geom_line(aes(color = Tree)) +
  geom_text_repel(
    aes(label = circumference), data = data_ends, 
    size = 3
    )

p6 <- ggplotly(p5)

p6

```


##########  CREATE FUNCTION TO PRODUCE A BUNCH OF RUN CHARTS ##########
##########  ALL AT ONCE  ##########

Final version from Perplexity & ChatGPT

```{r}

library(dplyr)
library(qicharts2)
library(purrr)
library(scales)
library(plotly)

# Loan data
### load scuc data files

df2 <- read_csv(file = here::here("data","SCUC Snapshots 1995 to 2022-LONG.csv"))

##########
# Cleanse data frame of items in descriptions that will cause failures when writing to files using the dynamic file naming function

# Remove % from grouping column 
# df2$grouping <- gsub("%", "", df2$grouping)

# Substitute the "-" character for the "/" character in the grouping column
# df2$grouping <- gsub("/", "-", df2$grouping)

# Substitute the "and" for the "/& character in the grouping column
# df2$grouping <- gsub("&", "and", df2$grouping)

# Substitute a space for a period in the grouping column
# df2$grouping <- gsub("\\.", " ", df2$grouping)
##########


# Define a custom labeling function
custom_label_func <- function(x) {
  if (any(abs(x[!is.na(x)]) >= 1e6)) {
    # For values greater than or equal to 1 million, format without exponential notation and with commas
    return(format(x, big.mark = ",", scientific = FALSE))
  } else {
    # For other values, use the default formatting with commas
    return(format(x, big.mark = ","))
  }
}

# Specify desired categories
desired_categories <- unique(df2$grouping)

# Specify desired metric
desired_sections <- unique(df2$section)

# Specify desired years 
desired_years <- unique(df2$year)

# Specify desired level of achievement
desired_level <- unique(df2$level_achieved)

# Specify desired grade level
desired_grades <- unique(df2$grade)

# Filter and group the data frame
df2plot_grouped <- df2 %>%
  filter((grouping %in% desired_categories) &
         (section %in% desired_section) &
         (year %in% desired_years) &
         (grade %in% desired_grades) &
         (level_achieved %in% desired_level)) %>%
  group_by(grouping, section, grade, level_achieved) %>%
  group_split()

# Define the function with arguments for desired parameters
generate_run_chart <- function(df_group, desired_years, desired_level) {
  # Check if the group has more than one observation
  if (nrow(df_group) > 1) {
    # Access the unique values for grouping, section, grade, and level_achieved
    group_category <- unique(df_group$grouping)
    group_section <- unique(df_group$section)
    group_grade <- unique(df_group$grade)
    group_level <- unique(df_group$level_achieved)
    
    # Calculate the y-axis range based on the minimum and maximum values of the 'value' column
    y_min <- min(df_group$value, na.rm = TRUE)
    y_max <- max(df_group$value, na.rm = TRUE)
    y_range <- y_max - y_min
    
    # Calculate the y.expand value to set the y-axis limits dynamically
    y_expand <- ifelse(y_range == 0, 25, 100 * (y_max - y_min) / y_range)
    
    # Create dynamic title and subtitle
    title <- paste0("Run Chart of ", group_category, ", section - ", group_section, ", Grade - ", group_grade, ",")
    subtitle <- paste0("for the ", paste(group_level, collapse = " and "), " Level, for the years ", min(desired_years), " - ", max(desired_years))
    
    # Create the chart with qicharts2
    plot <- qic(x = df_group$year,
                y = df_group$value,
                chart = "run",
                y.expand = y_expand,
                show.grid = TRUE,
                title = title,
                subtitle = subtitle,
                xlab = 'Academic Year-End'
               )
  
    # Customize y-axis using ggplot2 functions
    plot <- plot +
      scale_y_continuous(labels = custom_label_func) # Customize y-axis labels
    
    # Display the plot
    print(plot)
    
    # Save plot as PNG file
    filename <- paste0("img/", gsub(" ", "_", paste(title, subtitle, sep = "_")), ".png")
    ggsave(filename, plot, width = 2400, height = 1200, units = "px", dpi = 300, create.dir = TRUE)
    
  } else {
    # Return NULL for groups with only one observation
    return(NULL)
  }
}

# Apply the function with desired parameters for each category
plots <- map(df2plot_grouped, generate_run_chart, desired_years = desired_years, desired_level = desired_level)

```

![](img/Run_Chart_of_Category_-_All_Subjects,_Metric_-_staar,_Grade_-_all,_for_the_approaches_above_Level,_for_the_years_1995_-_2022.png){width=2400 height=1200}


Next, compare STAAR performance for ethnic groups at the 'Approaches Grade Level Standard, or Above' level


```{r}

# Specify desired categories from df2
desired_categories <- c("All", "White", "African American", "Hispanic", "Asian")

# Specify desired metric
desired_metric <- c("staar")

# Sprcify desired years 
desired_years <- 1995:2022  # range of years

# Specify desired level of achievement
desired_level <- c("approaches_above")

# Specify desired grade level
desired_grade <- c("all")

# Filter the data frame

df2plot <- df2 %>%
  filter((grouping %in% desired_categories) &
         (metric %in% desired_metric) &
         (year %in% desired_years) &
         (grade %in% desired_grade) &
         (level_achieved %in% desired_level))

ggplot(df2plot,
       aes(
         x = year, 
         y = value, 
         color = grouping)) +
  geom_line(na.rm = FALSE) +
  labs(color = "Groupings") +
  ylim(c(25, 100))  # Replace min_value and max_value with appropriate values

```

Now, compare STAAR scores for those failing the test


```{r}

# Specify desired categories
desired_categories <- c("All", "White", "African American", "Hispanic", "Asian")

# Specify desired metric
desired_metric <- c("staar")

# Sprcify desired years 
desired_years <- 1995:2022  # range of years

# Specify desired level of achievement
desired_level <- c("failing")

# Specify desired grade level
desired_grade <- c("all")

# Filter the data frame

df2plot <- df2 %>%
  filter((grouping %in% desired_categories) &
         (metric %in% desired_metric) &
         (year %in% desired_years) &
         (grade %in% desired_grade) &
         (level_achieved %in% desired_level))

ggplot(df2plot,
       aes(
         x = year, 
         y = value, 
         color = grouping)) +
  geom_line(na.rm = FALSE) +
  labs(color = "Groupings") +
  ylim(c(0, 70))  # Replace min_value and max_value with appropriate values

```


Staar Scores at 'Approaches, and above' by Subject, for all grade levels combined

```{r}

# Specify desired categories
desired_categories <- c("All Subjects", "Mathematics", "Reading/ELA", "Writing", "Science", "Social Studies")

# Specify desired metric
desired_metric <- c("staar")

# Sprcify desired years 
desired_years <- 1995:2022  # range of years

# Specify desired level of achievement
desired_level <- c("approaches_above")

# Specify desired grade level
desired_grade <- c("all")

# Filter the data frame

df2plot <- df2 %>%
  filter((grouping %in% desired_categories) &
         (metric %in% desired_metric) &
         (year %in% desired_years) &
         (grade %in% desired_grade) &
         (level_achieved %in% desired_level))

ggplot(df2plot,
       aes(
         x = year, 
         y = value, 
         color = grouping)) +
  geom_line(na.rm = FALSE) +
  labs(color = "Grouping") +
  scale_y_continuous(limits = c(40, 100), expand = c(0.01, 0.01))


```

Highlighting the 'All Subjects' line in the plot

```{r}


library(stringr)
library(ggtext)

# Specify desired categories
desired_categories <- c("All Subjects", "Mathematics", "Reading/ELA", "Writing", "Science", "Social Studies")

# Specify desired metric
desired_metrics <- c("staar")

# Specify desired years 
desired_periods <- 1995:2022

# Specify desired level of achievement
desired_levels <- c("approaches_above")

# Specify desired grade level
desired_grades <- c("all")

# Specify periods coverted for use in Title
periods_covered <- "1995 - 2022"


# Filter the data frame
df2plot <- df2 %>%
  filter((grouping %in% desired_categories) &
         (metric %in% desired_metrics) &
         (year %in% desired_periods) &
         (grade %in% desired_grades) &
         (level_achieved %in% desired_levels))

# Create a dynamic title with word wrap
title <- paste("Plotting the Data for:", paste(str_wrap(paste(desired_categories, collapse = ", "), width = 30), collapse = "\n"), 
               "for", paste(str_wrap(paste(desired_metrics, collapse = ", "), width = 30), collapse = "\n"),
               "at the", paste(str_wrap(paste(desired_levels, collapse = ", "), width = 30), collapse = "\n"),
               "Level for the periods", paste(str_wrap(paste(periods_covered, collapse = ", "), width = 30), collapse = "\n")
               )

# Label for y-axis
y_label <- "Average Score (in percent)"

ggplot(df2plot, 
       aes(x = year, 
           y = value, 
           color = grouping)) +
  geom_line(data = subset(df2plot, grouping == "All Subjects"), size = 2.0) +
  geom_line(data = subset(df2plot, grouping != "All Subjects"), size = 1) +
  labs(color = "Grouping", y = y_label) +
  ggtitle(title) +  # Using ggtext for title
  gghighlight(grouping == "All Subjects" | grouping == "Writing" | grouping == "Social Studies", use_direct_label = FALSE) +
  scale_color_manual(values = c("All Subjects" = "red",
                                "Mathematics" = "gray50",
                                "Reading/ELA" = "gray50",
                                "Writing" = "green",
                                "Science" = "gray50",
                                "Social Studies" = "blue")) +
  scale_y_continuous(limits = c(25, 100), expand = c(0.08, 0.08)) +
  scale_x_continuous(breaks = seq(1995, 2022, by = 1)) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
  )

```


Ethnic demographics of SCUC throughout the years

```{r}

library(stringr)
library(ggtext)
library(dplyr)

# Specify desired categories
desired_categories <- c("African American", "White", "Hispanic", "Asian", "American Indian", "Pacific Islander", "2 or More Races")

# Specify desired metric
desired_metrics <- c("demo")

# Specify desired level
desired_levels <- "approaches_above"

# Specify desired years 
desired_periods <- 1995:2022

# Specify periods covered for use in Title
periods_covered <- "1995 - 2022"

# Filter the data frame
df2plot <- df2 %>%
  filter((grouping %in% desired_categories) &
         (metric %in% desired_metrics) &
         (year %in% desired_periods))

# Create a dynamic title with word wrap
title <- paste("Plotting the Data for:", paste(str_wrap(paste(desired_categories, collapse = ", "), width = 30), collapse = "\n"), 
               "for", paste(str_wrap(paste(desired_metrics, collapse = ", "), width = 30), collapse = "\n"),
               "at the", paste(str_wrap(paste(desired_levels, collapse = ", "), width = 30), collapse = "\n"),
               "Level for the periods", paste(str_wrap(paste(periods_covered, collapse = ", "), width = 30), collapse = "\n"))

# Label for y-axis
y_label <- "Percentage of Total Students"

p <- ggplot(df2plot, aes(x = year, y = value, color = grouping)) +
  geom_line(data = filter(df2plot, grouping == "All Subjects"), linewidth = 2.0) +
  geom_line(data = filter(df2plot, grouping != "All Subjects"), linewidth = 1) +
  labs(color = "Grouping", y = y_label) +
  # ggtitle(title,  subtitle = NULL, label.size = NULL) +
  gghighlight(grouping == "All Subjects" | grouping == "Writing" | grouping == "Social Studies", use_direct_label = FALSE) +
  scale_color_manual(values = c("red", rep("gray50", 5), "blue")) +
  scale_y_continuous(limits = c(25, 100), expand = c(0.08, 0.08)) +
  scale_x_continuous(breaks = seq(1995, 2022, by = 1)) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
  )

print(p)

```



An animated pie chart with synthetic data covering 5 years

```{r}


library(ggplot2)
library(dplyr)
library(purrr)
library(gganimate)

# Function to create a pie chart for a specific year
create_pie_chart <- function(year) {
  # Sample random values
  random_values <- sample(100, 4, replace = TRUE)
  
  # Normalize the values to sum up to 100
  normalized_values <- random_values / sum(random_values) * 100
  
  # Create the data frame
  data_year <- data.frame(
    year = year,
    category = c("A", "B", "C", "D"),
    value = normalized_values
  )
  
  return(data_year)
}


# Create a list of data frames for all years
year_data <- map(2010:2014, create_pie_chart)

# Combine data frames into a single data frame
all_years <- bind_rows(year_data, .id = "frame")

# Plot creation
p <- ggplot(all_years, aes(x = "", y = value, fill = category)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(aes(label = paste(category, scales::percent(value / sum(value)), sep = ": ")), 
            position = position_stack(vjust = 0.5), size = 3) +  # Add labels with category and proportions
  coord_polar("y", start = 0) +
  theme_void() +
  theme(legend.position = "none") +  # Remove legend
  transition_states(frame, transition_length = 100, state_length = 100) +
  labs(title = "Year: {closest_state}")  # Add a dynamic title

# Animate the plot
anim <- gganimate::animate(p, nframes = 500, width = 600, height = 400, fps = 30)

# Show the animation
anim


```

CONVERT THIS SYNTHETIC FUNCTION TO:

An animated pie chart with actual data

```{r}


library(ggplot2)
library(dplyr)
library(purrr)
library(gganimate)

# Function to create a pie chart for a specific year
create_pie_chart <- function(year) {
  # Sample random values
  random_values <- sample(100, 4, replace = TRUE)
  
  # Normalize the values to sum up to 100
  normalized_values <- random_values / sum(random_values) * 100
  
  # Create the data frame
  data_year <- data.frame(
    year = year,
    category = c("A", "B", "C", "D"),
    value = normalized_values
  )
  
  return(data_year)
}


# Create a list of data frames for all years
year_data <- map(2010:2014, create_pie_chart)

# Combine data frames into a single data frame
all_years <- bind_rows(year_data, .id = "frame")

# Plot creation
p <- ggplot(all_years, aes(x = "", y = value, fill = category)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(aes(label = paste(category, scales::percent(value / sum(value)), sep = ": ")), 
            position = position_stack(vjust = 0.5), size = 3) +  # Add labels with category and proportions
  coord_polar("y", start = 0) +
  theme_void() +
  theme(legend.position = "none") +  # Remove legend
  transition_states(frame, transition_length = 100, state_length = 100) +
  labs(title = "Year: {closest_state}")  # Add a dynamic title

# Animate the plot
anim <- gganimate::animate(p, nframes = 500, width = 600, height = 400, fps = 30)

# Show the animation
anim

```



FIX THE LABEL AES IN THIS PLOT AND NORMALIZE!

```{r}
# Specify desired categories
desired_categories <- c("% African American", "% White", "% Hispanic", "% Asian", "% American Indian", "% Pacific Islander", "2 or More Races")

# Filter the data frame
df3plot <- df2 %>%
  filter((grouping %in% desired_categories) &
         (metric %in% desired_metrics) &
         (year %in% desired_periods))

# Convert yr variable to a factor variable called 'frame'
df3plot$frame <- factor(df3plot$year)

# Create a new column 'category' in df3plot with the desired_categories values
df3plot$category <- factor(df3plot$grouping, levels = desired_categories)

# Plot creation
p <- ggplot(df3plot, aes(x = "", y = value, fill = category)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(aes(label = paste(grouping, scales::percent(round(value / sum(value), 2)), sep = ": ")), 
            position = position_stack(vjust = 0.5), size = 3) +
  coord_polar("y", start = 0) +
  theme_void() +
  theme(legend.position = "none") +
  transition_states(frame, transition_length = 100, state_length = 100) +
  labs(title = "Year: {closest_state}")

# Animate the plot
anim <- gganimate::animate(p, nframes = 500, width = 600, height = 400, fps = 30)


# Save a gif

anim <- gganimate::animate(p, nframes = 500, width = 600, height = 400, fps = 30)
gganimate::anim_save("my_animation.gif", anim)


```


Examples from gganimate documentation


```{r}

### ** Examples

anim <- ggplot(iris, aes(Sepal.Width, Petal.Width)) +
  geom_point() +
  labs(title = "{closest_state}") +
  transition_states(Species, transition_length = 3, state_length = 1)

anim

# Use a unique group to avoid matching graphic elements
iris$group <- seq_len(nrow(iris))
anim1 <- ggplot(iris, aes(Sepal.Width, Petal.Width, group = group)) +
  geom_point() +
  labs(title = "{closest_state}") +
  transition_states(Species, transition_length = 3, state_length = 1) +
  enter_fade() +
  exit_fade()

anim1


# Set "wrap = FALSE" to avoid transitioning the last state to the first - THIS DOES NOT WORK

anim2 <- ggplot(iris, aes(Sepal.Width, Petal.Width)) +
  geom_point() +
  labs(title = "{closest_state}") +
  transition_states(Species, transition_length = 1, state_length = 5, wrap = FALSE)

anim2


```



```{r}


set.seed(42)
d <- data.frame(
  x1 = 1,
  y1 = rnorm(10),
  x2 = 2,
  y2 = rnorm(10),
  lab = state.name[1:10]
)

z <- ggplot(d, aes(x1, y1, xend = x2, yend = y2, label = lab, col = lab)) +
  geom_segment(size = 1) +
  guides(color = "none") +
  theme(axis.title.x = element_blank()) +
  geom_text_repel(
    nudge_x = -0.2, direction = "y", hjust = "right"
  ) +
  geom_text_repel(
    aes(x2, y2), nudge_x = 0.1, direction = "y", hjust = "left"
  )

z
```

